@model TodoMVC.ViewModels.TodosViewModel

@{
    Layout = "_TodosLayout.cshtml";
    LoveMVC.LoveContext<TodoMVC.ViewModels.TodosViewModel> love = LoveMVC.LoveContext.CreateLoveContext(Html);
}

@*<div>
        @using (Html.BeginForm())
        {
            Html.LabelFor(model=>model.FirstName);
            Html.EditorFor(model => model.FirstName);
            Html.ValidationMessageFor(model=>model.FirstName);

            Html.LabelFor(model=>model.LastName);
            Html.EditorFor(model => model.LastName);
            Html.ValidationMessageFor(model=>model.LastName);

            Html.LabelFor(model=>model.FullName);
            Html.DisplayFor(model=>model.FullName);
        }
    </div>*@

<section id="todoapp">
    @using (love.BeginView())
    {
        <header id="header">
            <h1>todos</h1>
            @*<input id="new-todo" placeholder="What needs to be done?" autofocus>*@
            @love.Html.EditorFor(model => model.NewTodoText, new { htmlAttributes = new { @id = "new-todo", @placeholder = "What needs to be done?", @autofocus = "" } })
        </header>
        using (love.lif(model => !model.HasTodos))
        {
            <!-- This section should be hidden by default and shown when there are todos -->
            <section id="main">
                @*<input id="toggle-all" type="checkbox">*@
                @love.Html.EditorFor(model => model.AreAllDone, new { htmlAttributes = new { @id = "toggle-all" } })
                <label for="toggle-all">Mark all as complete</label>
                <ul id="todo-list">
                    <!-- These are here just to show the structure of the list items -->
                    <!-- List items should get the class `editing` when editing and `completed` when marked as completed -->
                    @using (var holder = love.lforeach(model => model.Todos))
                    {
                        var t = holder.Item;
                        
                        <li @{if (t.TodoItem.IsDone) { <text> class="completed" </text>         }}>
                            <div class="view">
                                <input class="toggle" type="checkbox" @{if (t.TodoItem.IsDone) { <text> checked </text>          }}>
                                <label>@t.TodoItem.Text</label>
                                <button class="destroy"></button>
                            </div>
                            <input class="edit" value="@t.TodoItem.Text">
                        </li>
                    }
                </ul>
            </section>
            <!-- This footer should hidden by default and shown when there are todos -->
            <footer id="footer">
                <!-- This should be `0 items left` by default -->
                <span id="todo-count"><strong>0</strong> item left</span>
                <!-- Remove this if you don't implement routing -->
                <ul id="filters">
                    <li>
                        <a class="selected" href="#/">All</a>
                    </li>
                    <li>
                        <a href="#/active">Active</a>
                    </li>
                    <li>
                        <a href="#/completed">Completed</a>
                    </li>
                </ul>
                <!-- Hidden if no completed items are left ↓ -->
                <button id="clear-completed"></button>
            </footer>
        }
    }
</section>
